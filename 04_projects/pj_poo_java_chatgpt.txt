|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||---------------------------------------------------- PROGRAMACIÓN ORIENTADA A OBJETOS CON JAVA -----------------------------------------------------|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||                                                                                                                                                    |||
||| --  --. CONFIGURACIÓN DEL ENTORNO                                                                                                                  |||
||| --  01. CREAR UN DIAGRAMA DE CLASES - UML                                                                                                          |||
||| --  02. CREAR EL CÓDIGO EN JAVA DEL DIAGRAMA DE CLASES                                                                                             |||
|||                                                                                                                                                    |||
||| --  AUTOR:  ALBEIRO RAMOS, 2025.                                                                                                                   |||
|||                                                                                                                                                    |||
||| --  Bibliografía  XXXXXXXXXXXXXXXXXXXXXXXXXXXXX                                                                                                    |||
|||                   XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX                                                         |||
|||                                                                                                                                                    |||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||


|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||------------------------------------------------------------ CONFIGURACIÓN DEL ENTORNO -------------------------------------------------------------|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- ------  Instalar JDK: -------------------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Descargar 'JDK': .

                    ⦿   Ir a: https://www.oracle.com/co/java/technologies/downloads/.
                    ⦿   Descargar la versión compatible con la versión de Netbeans más estable dando click a 'Windows / x64 Installer'

            02. Ejecutar el instalador 'x64 Installer' y seguir los pasos de instalación

            
|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- ------  Instalar Netbeans: --------------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Descargar 'Netbeans': .

                    ⦿   Ir a: https://netbeans.apache.org/front/main/download/.
                    ⦿   Descargar la versión más estable de Netbeans dando click a 'Download / Binary (Platform Independent)'

            02. Descomprimir el '.zip' descargado en 'C:\'
            
            03. Eliminar el archivo '.zip'
            
            04. Crear un acceso directo del ejecutable que se encuentra en 'C:\netbeans\bin\netbeans64.exe' dando 'click derecho / Crear acceso 
                directo'. Se cambia el nombre y se envía al 'Escritorio' de Windows.


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- ------  Instalar StarUml: ---------------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Descargar 'StarUml': .

                    ⦿   Ir a: https://staruml.io/download/.
                    ⦿   Descargar el ejecutable que corresponda a la Arquitectura del Computador, por ejemplo. 'Windows (x86)'

            02. Ejecutar el instalador 'StarUML Setup 7.0.0.exe' y seguir los pasos de instalación            
            


|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||------------------------------------------------------ 01. CREAR UN DIAGRAMA DE CLASES - UML -------------------------------------------------------|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.01.  Crear un Diagrama de Clases - UML: ----------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Abrir 'StarUml'.

            02. En la parte superior derecha, dar click derecho a 'Model' y 'Delete From Model'.
            
            03. En la parte superior derecha, dar click a 'Untitled', y en el cuadro de texto ubicado en la parte inferior derecha, nombrar el proyecto,
                por ejemplo, 'nombre_proyecto'.
            
            04. Después de cambiar el nombre del proyecto, nuevamente en la parte superior derecha, dar click derecho a 'nombre_proyecto', y seleccionar                
                'Add Diagram / Class Diagram'.
            
            05. Después de cambiar el nombre del proyecto, nuevamente en la parte superior derecha, dar click derecho a 'nombre_proyecto', y seleccionar                
                'Add Diagram / Class Diagram'.
            
            

|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||---------------------------------------------------------- 02. ESTRUCTURA DE UN ALGORITMO ----------------------------------------------------------|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 02.01.  Crear el proyecto 'ex02_estructura_algoritmo': ----------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Abrir 'Netbeans'.

            02. Dar click a 'New Project / Java with Ant / Java Application / Next'.
            
            03. Dar click a 'Browse...' y seleccionar la ruta de guardado, por ejemplo: 'C:\...\java\sources\02_examples' y dar click a 'Open'.
            
            04. En 'Project Name: ex02_estructura_algoritmo'.
            
            05. En '☑ Create Main Class: paquete.Clase' y dar click a 'Finish'.            
                    
            06. Escribir el siguiente código:

                    01   package paquete;
                    02 
                    03   public class Clase {
                    04 
                    05       public static void main(String[] args) {
                    06           // Describir el Algoritmo: Entender el Objetivo o Problema como un Sistema [Entradas, Proceso y Salidas]
                    07     
                    08           // Declarar: variables, constantes, arreglos u objetos.
                    09     
                    10           // Dimensionar arreglos.
                    11     
                    12           // Iniciar variables, constantes, arreglos u objetos.
                    13     
                    14           // Entrada de Datos: Pueden ser solicitados o no.
                    15     
                    16           // Proceso: Generalmente, se usan las estructuras de control: Secuencial, condicional, repetición.
                    17     
                    18           // Salida de Datos. Resultado(s).	
                    19       }
                    20       
                    21   }

                ┌ ------------------------------------------------------------------------------------------------------------------------------------ ┐
                |                                                                                                                                      |
                  EXPLICACIÓN:   
                    
                    ⦿   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.

                |--------------------------------------------------------------------------------------------------------------------------------------|

                    A.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.                    
                |                                                                                                                                      |
                └ ------------------------------------------------------------------------------------------------------------------------------------ ┘

            07. Para ejecutar el código se da click a la opción 'Run / Run Project' o se presiona la tecla 'F6':

            08. Para mostrar las tíldes en la consola, 'Dar click derecho sobre el proyecto / Properties / Encoding: ISO-8859-1'. También dar click en
                'Properties / Compiling' y en 'Additional Compiler Options: -Dsun.stdout.encoding=UTF-8













|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||---------------------------------------------------------- XX. XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX ------------------------------------------------|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||


// Estructura de carpetas y archivos
GestorUsuariosMVC/
├── src/
│   ├── model/
│   │   ├── Rol.java
│   │   └── User.java
│   ├── controller/
│   │   └── UserController.java
│   ├── view/
│   │   └── MainView.java
│   └── app/
│       └── MainApp.java

// ==========================
// Rol.java
package model;

/**
 * Clase que representa un Rol de usuario
 */
public class Rol {
    private int rolId;
    private String rolName;

    public Rol() {}

    public Rol(int rolId, String rolName) {
        this.rolId = rolId;
        this.rolName = rolName;
    }

    public int getRolId() { return rolId; }
    public String getRolName() { return rolName; }
    public void setRolId(int rolId) { this.rolId = rolId; }
    public void setRolName(String rolName) { this.rolName = rolName; }

    @Override
    public String toString() {
        return rolId + " - " + rolName;
    }
}

// ==========================
// User.java
package model;

/**
 * Clase que representa un Usuario
 */
public class User {
    private int userId;
    private String userName;
    private String userLastName;
    private String userEmail;
    private String userPass;
    private boolean userState;
    private Rol rol; // Relación con Rol

    public User() {}

    public User(int userId, String userName, String userLastName, String userEmail, String userPass, boolean userState, Rol rol) {
        this.userId = userId;
        this.userName = userName;
        this.userLastName = userLastName;
        this.userEmail = userEmail;
        this.userPass = userPass;
        this.userState = userState;
        this.rol = rol;
    }

    // Getters y setters
    public int getUserId() { return userId; }
    public String getUserName() { return userName; }
    public String getUserLastName() { return userLastName; }
    public String getUserEmail() { return userEmail; }
    public String getUserPass() { return userPass; }
    public boolean isUserState() { return userState; }
    public Rol getRol() { return rol; }

    public void setUserId(int userId) { this.userId = userId; }
    public void setUserName(String userName) { this.userName = userName; }
    public void setUserLastName(String userLastName) { this.userLastName = userLastName; }
    public void setUserEmail(String userEmail) { this.userEmail = userEmail; }
    public void setUserPass(String userPass) { this.userPass = userPass; }
    public void setUserState(boolean userState) { this.userState = userState; }
    public void setRol(Rol rol) { this.rol = rol; }

    public String getFullName() {
        return userName + " " + userLastName;
    }

    @Override
    public String toString() {
        return userId + " - " + getFullName() + " - " + userEmail + " - Estado: " +
                (userState ? "Activo" : "Inactivo") + " - Rol: " + rol.getRolName();
    }
}

// ==========================
// UserController.java
package controller;

import model.User;
import model.Rol;
import java.util.ArrayList;

/**
 * Controlador que gestiona los usuarios y roles
 */
public class UserController {
    private ArrayList<User> users = new ArrayList<>();
    private ArrayList<Rol> roles = new ArrayList<>();

    public void addRol(Rol rol) { roles.add(rol); }
    public void addUser(User user) { users.add(user); }

    public ArrayList<User> getUsers() { return users; }
    public ArrayList<Rol> getRoles() { return roles; }

    public User autenticarUsuario(String email, String password) {
        for (User u : users) {
            if (u.getUserEmail().equalsIgnoreCase(email) && u.getUserPass().equals(password)) {
                return u;
            }
        }
        return null;
    }

    public Rol buscarRolPorId(int id) {
        for (Rol r : roles) {
            if (r.getRolId() == id) return r;
        }
        return null;
    }

    public boolean eliminarUsuarioPorId(int id) {
        return users.removeIf(u -> u.getUserId() == id);
    }

    public boolean eliminarRolPorId(int id) {
        return roles.removeIf(r -> r.getRolId() == id);
    }
}

// ==========================
// MainView.java
package view;

import controller.UserController;
import model.Rol;
import model.User;

import java.util.Scanner;

/**
 * Vista que interactúa con el usuario por consola
 */
public class MainView {
    private Scanner sc = new Scanner(System.in);

    public void iniciarAplicacion(UserController uc) {
        System.out.println("=== INICIO DE SESIÓN ===");
        System.out.print("Correo: ");
        String email = sc.nextLine();
        System.out.print("Contraseña: ");
        String pass = sc.nextLine();

        User user = uc.autenticarUsuario(email, pass);
        if (user != null) {
            System.out.println("\nBienvenido/a, " + user.getFullName() + " (" + user.getRol().getRolName() + ")");
            mostrarMenu(uc);
        } else {
            System.out.println("❌ Credenciales incorrectas.");
        }
    }

    public void mostrarMenu(UserController uc) {
        int opcion;
        do {
            System.out.println("\n=== MENÚ PRINCIPAL ===");
            System.out.println("1. Listar usuarios");
            System.out.println("2. Crear usuario");
            System.out.println("3. Eliminar usuario");
            System.out.println("4. Listar roles");
            System.out.println("5. Crear rol");
            System.out.println("6. Eliminar rol");
            System.out.println("0. Salir");
            System.out.print("Seleccione una opción: ");
            opcion = Integer.parseInt(sc.nextLine());

            switch (opcion) {
                case 1 -> listarUsuarios(uc);
                case 2 -> crearUsuario(uc);
                case 3 -> eliminarUsuario(uc);
                case 4 -> listarRoles(uc);
                case 5 -> crearRol(uc);
                case 6 -> eliminarRol(uc);
                case 0 -> System.out.println("Saliendo del sistema...");
                default -> System.out.println("❌ Opción no válida.");
            }
        } while (opcion != 0);
    }

    private void listarUsuarios(UserController uc) {
        System.out.println("\n--- Lista de Usuarios ---");
        for (User u : uc.getUsers()) {
            System.out.println(u);
        }
    }

    private void crearUsuario(UserController uc) {
        System.out.println("\n--- Crear Usuario ---");
        System.out.print("ID: ");
        int id = Integer.parseInt(sc.nextLine());
        System.out.print("Nombre: ");
        String name = sc.nextLine();
        System.out.print("Apellido: ");
        String lastName = sc.nextLine();
        System.out.print("Correo: ");
        String email = sc.nextLine();
        System.out.print("Contraseña: ");
        String pass = sc.nextLine();
        System.out.print("Estado (true/false): ");
        boolean estado = Boolean.parseBoolean(sc.nextLine());

        listarRoles(uc);
        System.out.print("ID del rol: ");
        int idRol = Integer.parseInt(sc.nextLine());
        Rol rol = uc.buscarRolPorId(idRol);

        if (rol != null) {
            User user = new User(id, name, lastName, email, pass, estado, rol);
            uc.addUser(user);
            System.out.println("✅ Usuario creado.");
        } else {
            System.out.println("❌ Rol no encontrado.");
        }
    }

    private void eliminarUsuario(UserController uc) {
        System.out.print("ID del usuario a eliminar: ");
        int id = Integer.parseInt(sc.nextLine());
        boolean eliminado = uc.eliminarUsuarioPorId(id);
        System.out.println(eliminado ? "✅ Usuario eliminado." : "❌ Usuario no encontrado.");
    }

    private void listarRoles(UserController uc) {
        System.out.println("\n--- Lista de Roles ---");
        for (Rol r : uc.getRoles()) {
            System.out.println(r);
        }
    }

    private void crearRol(UserController uc) {
        System.out.print("ID: ");
        int id = Integer.parseInt(sc.nextLine());
        System.out.print("Nombre del rol: ");
        String name = sc.nextLine();
        Rol rol = new Rol(id, name);
        uc.addRol(rol);
        System.out.println("✅ Rol creado.");
    }

    private void eliminarRol(UserController uc) {
        System.out.print("ID del rol a eliminar: ");
        int id = Integer.parseInt(sc.nextLine());
        boolean eliminado = uc.eliminarRolPorId(id);
        System.out.println(eliminado ? "✅ Rol eliminado." : "❌ Rol no encontrado.");
    }
}

// ==========================
// MainApp.java
package app;

import controller.UserController;
import model.Rol;
import model.User;
import view.MainView;

/**
 * Clase principal del proyecto
 */
public class MainApp {
    public static void main(String[] args) {
        UserController uc = new UserController();

        // Roles predefinidos
        Rol admin = new Rol(1, "Administrador");
        Rol user = new Rol(2, "Usuario");
        uc.addRol(admin);
        uc.addRol(user);

        // Usuarios predefinidos
        uc.addUser(new User(1, "Laura", "Gómez", "laura@example.com", "1234", true, admin));
        uc.addUser(new User(2, "Carlos", "Pérez", "carlos@example.com", "abcd", true, user));

        MainView view = new MainView();
        view.iniciarAplicacion(uc);
    }
}















